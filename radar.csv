"name","ring","quadrant","isNew","description"
Dependency drift fitness function,Adopt,Tools & Platforms,FALSE,"<p>Fitness functions introduced by <a href=""/radar/Techniques/evolutionary-architecture"">evolutionary architecture</a>, borrowed from <a href=""https://en.wikipedia.org/wiki/Evolutionary_computation#:%7E:text=In%20computer%20science%2C%20evolutionary%20computation,soft%20computing%20studying%20these%20algorithms."">evolutionary computing</a>, are executable functions that inform us if our applications and architecture are objectively moving away from their desired characteristics. They're essentially tests that can be incorporated into our release pipelines. One of the major characteristics of an application is the freshness of its dependencies to other libraries, APIs or environmental components that a <strong>dependency drift fitness function</strong> tracks to flag the out-of-date dependencies that require updating. With the growing and maturing number of tools that detect dependency drifts, such as <a href=""/radar/tools/dependabot"">Dependabot</a> or <a href=""/radar/tools/snyk"">Snyk</a>, we can easily incorporate dependency drift fitness functions into our software release process to take timely action in keeping our application dependencies up to date.</p>"
Run cost as architecture fitness function,Adopt,Methods & Patterns,FALSE,"<p>Automating the estimation, tracking and projection of cloud infrastructure's run cost is necessary for today's organizations. The cloud providers' savvy pricing models, combined with the proliferation of pricing parameters and the dynamic nature of today's architecture, can lead to surprisingly expensive run costs. For example, the price of <a href=""/radar/Techniques/serverless-architecture"">serverless</a> based on API calls, event streaming solutions based on traffic or data processing clusters based on running jobs, all have a dynamic nature that changes over time as the architecture evolves. When our teams manage infrastructure on the cloud, implementing <strong>run cost as architecture fitness function</strong> is one of their early activities. This means that our teams can observe the cost of running services against the value delivered; when they see deviations from what was expected or acceptable, they'll discuss whether it's time to evolve the architecture. The observation and calculation of the run cost is implemented as an automated function.</p>"
Security policy as code,Adopt,Software engineering,FALSE,"<p>As the technology landscape is becoming more complex, concerns such as security need more automation and engineering practices. When building systems, we need to take into consideration security policies, which are rules and procedures to protect our systems from threats and disruption. For example, access control policies define and enforce who can access which services and resources under what circumstances; by contrast, network security policies can dynamically limit the traffic rate to a particular service.</p>"
Nesto nesto,Adopt,Data (Data & AI),FALSE,"<p>As the technology landscape is becoming more complex, concerns such as security need more automation and engineering practices. When building systems, we need to take into consideration security policies, which are rules and procedures to protect our systems from threats and disruption. For example, access control policies define and enforce who can access which services and resources under what circumstances; by contrast, network security policies can dynamically limit the traffic rate to a particular service.</p>
